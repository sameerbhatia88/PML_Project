"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
View(PML_Training[,columns])
M<-abs(cor(PML_Training[,columns]))
my.colors=dmat.color(M)
my.ordered=order.single(cor(PML_Training[,columns]))
cpairs(PML_Training[,columns],my.ordered,panel.colors=my.colors,gap=0.5)
my.ordered
diag(M)<-0
which(M>0.8,arr.ind=T)
which(M>0.8,arr.ind=T)
M
which(M>0.8,arr.ind=T)
PML_Training_Subset<-PML_Training[,columns]
prComp<-prcomp(PML_Training_Subset,center=T,scale=T)
summary(prComp)
prComp$sdev^2
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
load<-prComp$rotation
sorted.loadings=load[order(load[,1]),1]
Main="Loadings plot for PC1"
xlabs="Variable Loadings"
dotplot(sorted.loadings,main=Main,xlab=xlabs,cex=1.5,col="red")
load
biplot(prComp)
my.var=varimax(load)
my.var
prComp$sdev^2
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
preProc<-preProcess(PML_Training_Subset,method="pca",pcaComp=9)
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
View(PML_Training_Subset$classe)
View(PML_Training$classe)
unique
(PML_Training$classe)
distinct(PML_Training$classe)
unique(PML_Training$classe)
columns<-which(names(PML_Training) %in% c("classe",
"num_window",
"roll_belt",
"pitch_belt",
"yaw_belt",
"total_accel_belt",
"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
PML_Training_Subset<-PML_Training[,columns]
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
View(inTrain)
training<-PML_Training_Subset[inTrain,]
testing<-PML_Training_Subset[-inTrain,]
prComp<-prcomp(training,center=T,scale=T)
View(training)
which(names(training) %in% c("classe"))
View(training[,which(names(training) %in% c("classe"))])
prComp<-prcomp(training[,-31],center=T,scale=T)
prComp$sdev^2
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,PML_Training_Subset[-31])
modelFit<-train(training$classe~.,method="glm",data=trainPC)
dim(trainPC)
dim(training)
dim(PML_Training)
PML_Training_Subset<-PML_Training[,columns]
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
training<-PML_Training_Subset[inTrain,]
testing<-PML_Training_Subset[-inTrain,]
dim(training)
dim(testing)
prComp<-prcomp(training[,-31],center=T,scale=T)
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,PML_Training_Subset[-31])
dim(trainPC)
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[-31])
dim(trainPC)
modelFit<-train(training$classe~.,method="glm",data=trainPC)
warning()
warnings()
class(training$classe)
names(trainPC)
View(trainPC)
prComp<-prcomp(log10(training[,-31])+1,center=T,scale=T)
View(training)
any(is.na(training))
prComp<-prcomp(log10(training[,-31]+1),center=T,scale=T)
prComp<-prcomp(training[,-31],center=T,scale=T)
prComp<-prcomp(log10(training[,-31]+1),center=T,scale=T)
summary(training[,-31])
log(-10)
log(0)
prComp<-prcomp(training[,-31],center=T,scale=T)
summary(prComp)
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[-31])
View(trainPC)
summary(trainPC)
modelFit<-train(training$classe~.,method="glm",data=trainPC)
?preProcess
preProc<-preProcess(log10(training[,-31]+1),method="pca",pcaComp=9)
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[-31])
modelFit<-train(training$classe~.,method="glm",data=trainPC)
modelFit<-train(training$classe~.,method="rf",data=trainPC)
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100)
importance(r)
getTree(r, 1)
plot(r)
summary(r)
r
getTree(r, 1)
preProc
dim(testing)
dim(training)
which(names(testing) %in% c("classe")
)
trainPC<-predict(preProc,training[,-31])
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[,-31])
testPC<-predict(preProc,testing[,-31])
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100)
pred<-predict(r,testPC)
confusionMatrix(testing$classe,pred)
confusionMatrix(testing$classe,pred)$Accuracy
confusionMatrix(testing$classe,pred)[1]
plot(performance(prediction(pred, testing$classe), 'tpr', 'fpr'))
library(ROCR)
install.packages("require(ROCR)")
install.packages("ROCR")
library(ROCR)
plot(performance(prediction(pred, testing$classe), 'tpr', 'fpr'))
plot(performance(prediction(pred, testing$classe), 'tpr', 'fpr'))
prediction<-prediction(pred,testing$classe)
pred_prob<-predict(r, testPC, type = 'prob')
plot(performance(prediction(pred_prob[,2], testing$classe), 'tpr', 'fpr'))
table(testing$classe,pred)
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
training<-PML_Training_Subset[inTrain,]
testing<-PML_Training_Subset[-inTrain,]
r = randomForest(training$classe ~., data=training[,31], importance=TRUE, do.trace=100)
pred<-predict(r,testing[,-31])
pred<-predict(r,newdata=testing[,-31])
library(caret)
library(gclus)
library(ROCR)
setwd("C:/Users/Sameer/Desktop/Study/Practical Machine Learning/Project")
PML_Training<-read.csv("pml_training.csv",header=T)
PML_Testing<-read.csv("pml_testing.csv",header=T)
summary(PML_Training)
columns<-which(names(PML_Training) %in% c("classe",
"num_window",
"roll_belt",
"pitch_belt",
"yaw_belt",
"total_accel_belt",
"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
## Use relevant columns
PML_Training_Subset<-PML_Training[,columns]
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
training<-PML_Training_Subset[inTrain,]
testing<-PML_Training_Subset[-inTrain,]
## Factor Reduction
prComp<-prcomp(log10(training[,-31]+1),center=T,scale=T)
prComp<-prcomp(training[,-31],center=T,scale=T)
summary(prComp)
#Eigen Values - show that we should use 10 components
prComp$sdev^2
#Screeplot shows that we should use 9 components
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
#We will go with Conservative approach and use 9 components
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[,-31])
testPC<-predict(preProc,testing[,-31])
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100)
summary(r)
pred<-predict(r,testPC)
confusionMatrix(testing$classe,pred)
r
r2 = randomForest(training$classe ~., data=training, importance=TRUE, do.trace=100)
r2 = randomForest(classe ~., data=training, importance=TRUE, do.trace=100)
pred<-predict(r2,testing[,-31])
pred<-predict(r,testPC)
pred2<-predict(r2,testing[,-31])
confusionMatrix(testing$classe,pred2)
dim(PML_Training)
dim(PML_Testing)
columns_PML_TEST<-which(names(PML_Testing) %in% c("num_window",
"roll_belt",
"pitch_belt",
"yaw_belt",
"total_accel_belt",
"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
columns_PML_TEST
pred_final<-predict(r2,PML_Testing[,columns_PML_TEST])
pred_final
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
pml_write_files(pred_final)
submit()
library(swirl)
anova(r,r2)
classe<-PML_Training$classe
predictors<-data.frame(PML_Training_Subset[$classe],31])
classe<-PML_Training_Subset$classe
predictors<-data.frame(PML_Training_Subset[classe],31])
predictors<-data.frame(PML_Training_Subset[,-31])
classe<-PML_Training_Subset$classe
dm(PML_Testing)
dim(PML_Training_Subset)
ll<-matrix(NA,nrow=19622,ncol=31)
predictors<-PML_Training_Subset[,-31]
Classe<-PML_Training_Subset[,31]
rfFit<-train(classe~.,data=PML_Training_Subset,method="rf")
treeBag<-bag(predictors,Classe,B=10,
bagControl=bagControl(fit=ctreeBag$fit,
predict=ctreeBag$pred,
aggregate=ctreeBag$aggregate))
install.packages(party)
install.packages("party")
library(party)
treeBag<-bag(predictors,Classe,B=10,
bagControl=bagControl(fit=ctreeBag$fit,
predict=ctreeBag$pred,
aggregate=ctreeBag$aggregate))
pred3<-predict(treeBag,predictors)
confusionMatrix(Classe,pred3)
plot(r, log="y")
varImpPlot(mtcars.rf)
varImpPlot(r)
MDSplot(r, PML_Training_Subset$classe)
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100,proximity=T)
r2 = randomForest(classe ~., data=training, importance=TRUE,proximity=TRUE)
r2 = randomForest(classe ~., data=training, importance=TRUE, do.trace=100)
tree <- getTree(r,1,labelVar=TRUE)
tree
tree <- getTree(r$finalModel,k=2,labelVar=TRUE)
tree <- getTree(r,k=2,labelVar=TRUE)
tree
to.dendrogram <- function(dfrep,rownum=1,height.increment=0.1){
if(dfrep[rownum,'status'] == -1){
rval <- list()
attr(rval,"members") <- 1
attr(rval,"height") <- 0.0
attr(rval,"label") <- dfrep[rownum,'prediction']
attr(rval,"leaf") <- TRUE
}else{##note the change "to.dendrogram" and not "to.dendogram"
left <- to.dendrogram(dfrep,dfrep[rownum,'left daughter'],height.increment)
right <- to.dendrogram(dfrep,dfrep[rownum,'right daughter'],height.increment)
rval <- list(left,right)
attr(rval,"members") <- attr(left,"members") + attr(right,"members")
attr(rval,"height") <- max(attr(left,"height"),attr(right,"height")) + height.increment
attr(rval,"leaf") <- FALSE
attr(rval,"edgetext") <- dfrep[rownum,'split var']
}
class(rval) <- "dendrogram"
return(rval)
}
d <- to.dendrogram(tree)
str(d)
plot(d,center=TRUE,leaflab='none',edgePar=list(t.cex=1,p.col=NA,p.lty=0))
varImpPlot(r)
str(d)
plot(d,center=TRUE,leaflab='none',edgePar=list(t.cex=1,p.col=NA,p.lty=0))
plot(r, log="y")
legend("top", colnames(r$err.rate))
legend("top", colnames(r$err.rate),col=1:6,cex=0.8,fill=1:6)
plot(r, log="y")
legend("topright", colnames(r$err.rate),col=1:6,cex=0.8,fill=1:6)
varImpPlot(r)
varImpPlot(r,main="Variable Importance")
r
confusionMatrix(testing$classe,pred)
varUsed(r, by.tree=FALSE, count=TRUE)
MDSplot(r, training$classe, palette=rep(1, 2),
pch=as.numeric(training$classe))
library(caret)
library(gclus)
library(ROCR)
library(party)
setwd("C:/Users/Sameer/Desktop/Study/Practical Machine Learning/Project")
PML_Training<-read.csv("pml_training.csv",header=T)
PML_Testing<-read.csv("pml_testing.csv",header=T)
summary(PML_Training)
columns<-which(names(PML_Training) %in% c("classe",
"num_window",
"roll_belt",
"pitch_belt",
"yaw_belt",
"total_accel_belt",
"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
## Use relevant columns
PML_Training_Subset<-PML_Training[,columns]
inTrain<-createDataPartition(y=PML_Training_Subset$classe,p=0.75,list=FALSE)
training<-PML_Training_Subset[inTrain,]
testing<-PML_Training_Subset[-inTrain,]
prComp<-prcomp(training[,-31],center=T,scale=T)
summary(prComp)
prComp$sdev^2
Eigen_Values=prComp$sdev^2
Eigen_Values>1
sum(Eigen_Values>1)
screeplot(prComp,main="Scree Plot",xlab="Components")
screeplot(prComp,type="line",main="Scree  Plot")
prComp$rotation
summary(prComp)
screeplot(prComp,main="Scree Plot",xlab="Components")
load = prComp$rotation
my.var=varimax(load)
my.var
preProc<-preProcess(training[,-31],method="pca",pcaComp=9)
trainPC<-predict(preProc,training[,-31])
testPC<-predict(preProc,testing[,-31])
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100)
library(randomForest)
r = randomForest(training$classe ~., data=trainPC, importance=TRUE, do.trace=100)
summary(r)
r
pred<-predict(r,testPC)
confusionMatrix(testing$classe,pred)
plot(r, log="y",main="Random Forrest with PCA")
legend("topright", colnames(r$err.rate),col=1:6,cex=0.8,fill=1:6)
View(testPC)
VariableUsedPCA<-varUsed(r, by.tree=FALSE, count=TRUE)
Max_Imp=names(testPC)[which(VariableUsedPCA==max(VariableUsedPCA))]
Min_Imp=names(testPC)[which(VariableUsedPCA==min(VariableUsedPCA))]
Max_ImpPCA=names(testPC)[which(VariableUsedPCA==max(VariableUsedPCA))]
Min_ImpPCA=names(testPC)[which(VariableUsedPCA==min(VariableUsedPCA))]
names(testPC)[which(VariableUsedPCA==max(VariableUsedPCA))]
names(testPC)[which(VariableUsedPCA==min(VariableUsedPCA))]
r2 = randomForest(classe ~., data=training, importance=TRUE, do.trace=100)
pred2<-predict(r2,testing[,-31])
plot(r2, log="y",main="Simple Random Forrest")
legend("topright", colnames(r2$err.rate),col=1:6,cex=0.8,fill=1:6)
pred_rf<-predict(r2,PML_Testing[,columns_PML_TEST])
columns_PML_TEST<-which(names(PML_Testing) %in% c("num_window",
"roll_belt",
"pitch_belt",
"yaw_belt",
"total_accel_belt",
"gyros_belt_x",
"gyros_belt_y",
"gyros_belt_z",
"accel_belt_x",
"accel_belt_y",
"accel_belt_z",
"magnet_belt_x",
"magnet_belt_y",
"magnet_belt_z",
"roll_arm",
"pitch_arm",
"yaw_arm",
"total_accel_arm",
"gyros_arm_x",
"gyros_arm_y",
"gyros_arm_z",
"accel_arm_x",
"accel_arm_y",
"accel_arm_z",
"magnet_arm_x",
"magnet_arm_y",
"magnet_arm_z",
"roll_dumbbell",
"pitch_dumbbell",
"yaw_dumbbell"))
pred_rf<-predict(r2,PML_Testing[,columns_PML_TEST])
rfFit<-train(classe~.,data=PML_Training_Subset,method="rf")
predictors<-PML_Training_Subset[,-31]
Classe<-PML_Training_Subset[,31]
treeBag<-bag(predictors,Classe,B=10,
bagControl=bagControl(fit=ctreeBag$fit,
predict=ctreeBag$pred,
aggregate=ctreeBag$aggregate))
pred_rf_pca<-predict(r,PML_Testing[,columns_PML_TEST])
predictPC<-predict(preProc,PML_Testing[,columns_PML_TEST])
pred_rf_pca<-predict(r,predictPC)
pred_treeBag<-predict(treeBag,PML_Testing[,columns_PML_TEST])
Combined_Prediction_DS=cbind(RandomForest=pred_rf,RF_PCA=pred_rf_pca,TreeBag=treeBag)
View(pred_rf)
View(pred_rf_pca)
View(pred_treeBag)
Combined_Prediction_DS=data.frame(RandomForest=pred_rf,RF_PCA=pred_rf_pca,TreeBag=pred_treeBag)
View(Combined_Prediction_DS)
